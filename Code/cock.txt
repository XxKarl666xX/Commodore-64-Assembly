 ;startup address
  * = $0801

  ;create BASIC startup (SYS line)
  !basic
     LDX #$00          ; Initialize X register to 0

clear_screen:
    LDA #$20          ; Load the ASCII code for space (32) into the accumulator
    STA $0400, X      ; Store the space character at address $0400 + X
    STA $0500, X      ; Store the space character at address $0500 + X
    STA $0600, X      ; Store the space character at address $0600 + X
    STA $0700, X      ; Store the space character at address $0700 + X
    INX               ; Increment the X register
    CPX #$FF          ; Compare X with 256
    BNE clear_screen  ; Branch to 'clear_screen' if X is not equal to 250
;screen clear, start screen shit now

;make background black
LDA #$0
STA $D020
STA $D021

;play around with bit manipulation
LDA $D011
ORA #%00010011 ;original 00011011, complete screen covered by border > all black


;creating free places for my memory
STA $00FB ;empty memory for loop count
STA $00FC ;empty memory for delay0
STA $00FD ;empty memory for delay0
STA $00FE ;empty memory for delay0
;creating of free memory done



LDY $00 ;my character for loop
LDA $3
LDX $00
;loop with a end, later infinite and dont make ADC #$01
loop;
STA $0400, Y ;what i wanted was to store accumulator into mem adress +y
INY
JSR delay0
LDX $00FB
INX
STX $00FB
CPX #$FF
BNE loop









;creating my delay for later, using X and free memory for caching results, need to call last so not stuck in forever loop
delay0:
    CLC
delay1:
    LDX $00FC
    INX ;INX and DEX need 1 Byter for 2 Cycles, seems like the best and cheapest waste, close to 0,5ms wait
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FC
    CPX #$FF
    BNE delay1
    LDX #$00
    STX $00FC
delay2:
    LDX $00FD
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FD
    CPX #$FF
    BNE delay2
    LDX #$00
    STX $00FD
delay3:
    LDX $00FD
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FD
    CPX #$FF
    BNE delay3
    LDX #$00
    STX $00FD
    delay4:
    LDX $00FC
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FC
    CPX #$FF
    BNE delay4
    LDX #$00
    STX $00FC
  ;return to BASIC
  rts

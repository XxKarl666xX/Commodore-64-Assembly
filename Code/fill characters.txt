 ;startup address
  * = $0801

  ;create BASIC startup (SYS line)
  !basic
     LDX #$00          ; Initialize X register to 0

clear_screen:
    LDA #$20          ; Load the ASCII code for space (32) into the accumulator
    STA $0400, X      ; Store the space character at address $0400 + X
    STA $0500, X      ; Store the space character at address $0500 + X
    STA $0600, X      ; Store the space character at address $0600 + X
    STA $0700, X      ; Store the space character at address $0700 + X
    INX               ; Increment the X register
    CPX #$FF          ; Compare X with 256
    BNE clear_screen  ; Branch to 'clear_screen' if X is not equal to 250
;screen clear, start screen shit now

;make background black
LDA #$0
STA $D020
STA $D021

;bit manipulation for background
LDA $D011
ORA #%00010011 ;original 00011011, complete screen covered by border > all black, except ready writing

COLOR = 2
COLOR_MEM = $D800
X = 0
Y = 0
OFFSET = Y * 40 + X
;creating free places for my memory
STA $00FB ;empty memory for loop count
STA $00FC ;empty memory for delay0
STA $00FD ;empty memory for delay0
STA $00FE ;empty memory for delay0
;creating of free memory done



LDY $00 ;my character for loop
LDA $3
LDX $00
;loop with a end, later infinite and dont make ADC #$01
loop;
;mem map is wrong about placement of screen memory
JSR delaylong
STA $0399, Y ;background mem location1
STA $0469, Y ;background mem location2
STA $0538, Y ;background mem location3
STA $0606, Y ;background mem location4
STA $0674, Y ;background mem location5
STA $0709, Y ;background mem location6
STX COLOR_MEM + OFFSET
STX $DBE8
LDX X
INX
STX X
INY
LDX $00FB
INX
STX $00FB
CPX #$FF
BNE loop









;creating my delay for later, using X and free memory for caching results, need to call last so not stuck in forever loop
delaylong:
    CLC
delay1:
    LDX $00FC
    INX ;INX and DEX need 1 Byter for 2 Cycles, seems like the best and cheapest waste, close to 0,5ms wait
    STX $00FC
    CPX #$FF
    BNE delay1
    LDX #$00
    STX $00FC
delay2:
    LDX $00FD
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FD
    CPX #$FF
    BNE delay2
    LDX #$00
    STX $00FD
delay3:
    LDX $00FD
    INX
    DEX
    INX
    DEX
    INX
    DEX
    INX
    STX $00FD
    CPX #$FF
    BNE delay3
    LDX #$00
    STX $00FD
    delay4:
    LDX $00FC
    INX
    DEX
    INX
    STX $00FC
    CPX #$FF
    BNE delay4
    LDX #$00
    STX $00FC
  ;return to BASIC
  rts
